/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Client;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation.Http
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForgeAppsApiHttp
    {
        /// <summary>
        /// Creates/updates the nickname for the current Forge app. Creates/updates the nickname for the current Forge app.  The nickname is  used as a clearer alternative name when identifying AppBundles and Activities, as  compared to using the Forge app ID.  Once you have defined a nickname,  it MUST be used instead of the Forge app ID.                The new nickname cannot be in use by any other Forge app.                The Forge app cannot have any data when this endpoint is invoked.  Use the &#39;DELETE /forgeapps/me&#39;  endpoint (cautiously!!!) to remove all data from this Forge app.  &#39;DELETE /forgeapps/me&#39; is  also the only way to remove the nickname.                Note the nickname is supplied in the body, not as a query-parameter.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>/// <param name="nicknameRecord">new nickname (public key is for internal use only).</param>
        /// <returns>Task of ApiResponse<StatusCodeResult></returns>
        
        System.Threading.Tasks.Task<ApiResponse<StatusCodeResult>> CreateNicknameAsync (string id, NicknameRecord nicknameRecord);
        /// <summary>
        /// Delete all data associated with this Forge app. Delete all data associated with the given Forge app.                ALL Design Automation appbundles and activities are DELETED.                This action is required prior to using the &#39;PATCH /forgeapps/me&#39; endpoint when changing the nickname for the current Forge app,.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        System.Threading.Tasks.Task<HttpResponseMessage> DeleteUserAsync (string id);
        /// <summary>
        /// Returns the user&#39;s (app) nickname. Return the given Forge app&#39;s nickname.                If the app has no nickname, this route will return its id.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <returns>Task of ApiResponse<string></returns>
        
        System.Threading.Tasks.Task<ApiResponse<string>> GetNicknameAsync (string id);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForgeAppsApiHttp : IForgeAppsApiHttp
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForgeAppsApiHttp"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public ForgeAppsApiHttp(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.Service = service ?? ForgeService.CreateDefault();

            // set BaseAddress from configuration or default
            this.Service.Client.BaseAddress = configuration?.Value.BaseAddress ?? new Configuration().BaseAddress;
        }

         /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the ForgeService</value>
        public ForgeService Service {get; set;}

        /// <summary>
        /// Creates/updates the nickname for the current Forge app. Creates/updates the nickname for the current Forge app.  The nickname is  used as a clearer alternative name when identifying AppBundles and Activities, as  compared to using the Forge app ID.  Once you have defined a nickname,  it MUST be used instead of the Forge app ID.                The new nickname cannot be in use by any other Forge app.                The Forge app cannot have any data when this endpoint is invoked.  Use the &#39;DELETE /forgeapps/me&#39;  endpoint (cautiously!!!) to remove all data from this Forge app.  &#39;DELETE /forgeapps/me&#39; is  also the only way to remove the nickname.                Note the nickname is supplied in the body, not as a query-parameter.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>/// <param name="nicknameRecord">new nickname (public key is for internal use only).</param>
        /// <returns>Task of ApiResponse<StatusCodeResult></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<StatusCodeResult>> CreateNicknameAsync (string id, NicknameRecord nicknameRecord)
        {
            var localVarPath = "/v3/forgeapps/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                


                request.Content = Marshalling.Serialize(nicknameRecord, "application/json"); // http body (model) parameter

                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<StatusCodeResult>(localVarResponse, (StatusCodeResult)Marshalling.Deserialize(localVarResponse.Content, typeof(StatusCodeResult)));

            } // using
        }
        /// <summary>
        /// Delete all data associated with this Forge app. Delete all data associated with the given Forge app.                ALL Design Automation appbundles and activities are DELETED.                This action is required prior to using the &#39;PATCH /forgeapps/me&#39; endpoint when changing the nickname for the current Forge app,.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        public async System.Threading.Tasks.Task<HttpResponseMessage> DeleteUserAsync (string id)
        {
            var localVarPath = "/v3/forgeapps/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return localVarResponse;

            } // using
        }
        /// <summary>
        /// Returns the user&#39;s (app) nickname. Return the given Forge app&#39;s nickname.                If the app has no nickname, this route will return its id.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <returns>Task of ApiResponse<string></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetNicknameAsync (string id)
        {
            var localVarPath = "/v3/forgeapps/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<string>(localVarResponse, (string)Marshalling.Deserialize(localVarResponse.Content, typeof(string)));

            } // using
        }
    }
}
