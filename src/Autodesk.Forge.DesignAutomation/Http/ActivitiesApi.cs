/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Client;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation.Http
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivitiesApiHttp
    {
        /// <summary>
        /// Creates a new Activity. Creates a new Activity.              Limits (varies by Engine):              1. Number of Activities that can be created.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="item"></param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Activity>> CreateActivityAsync (Activity item);
        /// <summary>
        /// Creates a new alias for this Activity. Creates a new alias for this Activity.              Limit:              1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }.</param>
        /// <returns>Task of ApiResponse<Alias></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Alias>> CreateActivityAliasAsync (string id, Alias alias);
        /// <summary>
        /// Creates a new version of the Activity. Creates a new version of the Activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="item"></param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Activity>> CreateActivityVersionAsync (string id, Activity item);
        /// <summary>
        /// Deletes the specified Activity. Deletes the specified Activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        System.Threading.Tasks.Task<HttpResponseMessage> DeleteActivityAsync (string id);
        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="aliasId">Name of alias to delete.</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        System.Threading.Tasks.Task<HttpResponseMessage> DeleteActivityAliasAsync (string id, string aliasId);
        /// <summary>
        /// Deletes the specified version of the Activity. Deletes the specified version of the Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="version">Version to delete (integer).</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        System.Threading.Tasks.Task<HttpResponseMessage> DeleteActivityVersionAsync (string id, int version);
        /// <summary>
        /// Gets the details of the specified version of the Activity. Gets the details of the specified version of the Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="version">Version to retrieve (integer).</param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Activity>> GeActivityVersionAsync (string id, int version);
        /// <summary>
        /// Lists all available Activities. Lists all available Activities, including Activities shared with this Forge app.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse<QueryResultPageString></returns>
        
        System.Threading.Tasks.Task<ApiResponse<QueryResultPageString>> GetActivitiesAsync (string page = null);
        /// <summary>
        /// Gets the details of the specified Activity. Gets the details of the specified Activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the Activity (owner.name+label).</param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Activity>> GetActivityAsync (string id);
        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of ApiResponse<Alias></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Alias>> GetActivityAliasAsync (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified Activity. Lists all aliases for the specified Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse<PageAlias></returns>
        
        System.Threading.Tasks.Task<ApiResponse<PageAlias>> GetActivityAliasesAsync (string id, string page = null);
        /// <summary>
        /// Lists all versions of the specified Activity. Lists all versions of the specified Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse<PageInt32></returns>
        
        System.Threading.Tasks.Task<ApiResponse<PageInt32>> GetActivityVersionsAsync (string id, string page = null);
        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="aliasId">Name of alias.</param>/// <param name="alias">Alias details to be modified.</param>
        /// <returns>Task of ApiResponse<Alias></returns>
        
        System.Threading.Tasks.Task<ApiResponse<Alias>> ModifyActivityAliasAsync (string id, string aliasId, Alias alias);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActivitiesApiHttp : IActivitiesApiHttp
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApiHttp"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public ActivitiesApiHttp(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.Service = service ?? ForgeService.CreateDefault();

            // set BaseAddress from configuration or default
            this.Service.Client.BaseAddress = configuration?.Value.BaseAddress ?? new Configuration().BaseAddress;
        }

         /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the ForgeService</value>
        public ForgeService Service {get; set;}

        /// <summary>
        /// Creates a new Activity. Creates a new Activity.              Limits (varies by Engine):              1. Number of Activities that can be created.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="item"></param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Activity>> CreateActivityAsync (Activity item)
        {
            var localVarPath = "/v3/activities";

            using (var request = new HttpRequestMessage())
            {

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                


                request.Content = Marshalling.Serialize(item, "application/json"); // http body (model) parameter

                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Activity>(localVarResponse, (Activity)Marshalling.Deserialize(localVarResponse.Content, typeof(Activity)));

            } // using
        }
        /// <summary>
        /// Creates a new alias for this Activity. Creates a new alias for this Activity.              Limit:              1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }.</param>
        /// <returns>Task of ApiResponse<Alias></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Alias>> CreateActivityAliasAsync (string id, Alias alias)
        {
            var localVarPath = "/v3/activities/{id}/aliases";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                


                request.Content = Marshalling.Serialize(alias, "application/json"); // http body (model) parameter

                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Alias>(localVarResponse, (Alias)Marshalling.Deserialize(localVarResponse.Content, typeof(Alias)));

            } // using
        }
        /// <summary>
        /// Creates a new version of the Activity. Creates a new version of the Activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="item"></param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Activity>> CreateActivityVersionAsync (string id, Activity item)
        {
            var localVarPath = "/v3/activities/{id}/versions";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                


                request.Content = Marshalling.Serialize(item, "application/json"); // http body (model) parameter

                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Activity>(localVarResponse, (Activity)Marshalling.Deserialize(localVarResponse.Content, typeof(Activity)));

            } // using
        }
        /// <summary>
        /// Deletes the specified Activity. Deletes the specified Activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        public async System.Threading.Tasks.Task<HttpResponseMessage> DeleteActivityAsync (string id)
        {
            var localVarPath = "/v3/activities/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return localVarResponse;

            } // using
        }
        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="aliasId">Name of alias to delete.</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        public async System.Threading.Tasks.Task<HttpResponseMessage> DeleteActivityAliasAsync (string id, string aliasId)
        {
            var localVarPath = "/v3/activities/{id}/aliases/{aliasId}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                localVarPath = Marshalling.SetPathVariable(localVarPath, "aliasId", aliasId); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return localVarResponse;

            } // using
        }
        /// <summary>
        /// Deletes the specified version of the Activity. Deletes the specified version of the Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="version">Version to delete (integer).</param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        public async System.Threading.Tasks.Task<HttpResponseMessage> DeleteActivityVersionAsync (string id, int version)
        {
            var localVarPath = "/v3/activities/{id}/versions/{version}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                localVarPath = Marshalling.SetPathVariable(localVarPath, "version", version); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return localVarResponse;

            } // using
        }
        /// <summary>
        /// Gets the details of the specified version of the Activity. Gets the details of the specified version of the Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="version">Version to retrieve (integer).</param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Activity>> GeActivityVersionAsync (string id, int version)
        {
            var localVarPath = "/v3/activities/{id}/versions/{version}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                localVarPath = Marshalling.SetPathVariable(localVarPath, "version", version); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Activity>(localVarResponse, (Activity)Marshalling.Deserialize(localVarResponse.Content, typeof(Activity)));

            } // using
        }
        /// <summary>
        /// Lists all available Activities. Lists all available Activities, including Activities shared with this Forge app.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse<QueryResultPageString></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<QueryResultPageString>> GetActivitiesAsync (string page = null)
        {
            var localVarPath = "/v3/activities";

            using (var request = new HttpRequestMessage())
            {
                if (page != null) localVarPath = Marshalling.AddQuery(localVarPath, "page", page); // query parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<QueryResultPageString>(localVarResponse, (QueryResultPageString)Marshalling.Deserialize(localVarResponse.Content, typeof(QueryResultPageString)));

            } // using
        }
        /// <summary>
        /// Gets the details of the specified Activity. Gets the details of the specified Activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the Activity (owner.name+label).</param>
        /// <returns>Task of ApiResponse<Activity></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Activity>> GetActivityAsync (string id)
        {
            var localVarPath = "/v3/activities/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Activity>(localVarResponse, (Activity)Marshalling.Deserialize(localVarResponse.Content, typeof(Activity)));

            } // using
        }
        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of ApiResponse<Alias></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Alias>> GetActivityAliasAsync (string id, string aliasId)
        {
            var localVarPath = "/v3/activities/{id}/aliases/{aliasId}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                localVarPath = Marshalling.SetPathVariable(localVarPath, "aliasId", aliasId); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Alias>(localVarResponse, (Alias)Marshalling.Deserialize(localVarResponse.Content, typeof(Alias)));

            } // using
        }
        /// <summary>
        /// Lists all aliases for the specified Activity. Lists all aliases for the specified Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse<PageAlias></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<PageAlias>> GetActivityAliasesAsync (string id, string page = null)
        {
            var localVarPath = "/v3/activities/{id}/aliases";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                if (page != null) localVarPath = Marshalling.AddQuery(localVarPath, "page", page); // query parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<PageAlias>(localVarResponse, (PageAlias)Marshalling.Deserialize(localVarResponse.Content, typeof(PageAlias)));

            } // using
        }
        /// <summary>
        /// Lists all versions of the specified Activity. Lists all versions of the specified Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse<PageInt32></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<PageInt32>> GetActivityVersionsAsync (string id, string page = null)
        {
            var localVarPath = "/v3/activities/{id}/versions";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                if (page != null) localVarPath = Marshalling.AddQuery(localVarPath, "page", page); // query parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<PageInt32>(localVarResponse, (PageInt32)Marshalling.Deserialize(localVarResponse.Content, typeof(PageInt32)));

            } // using
        }
        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>/// <param name="aliasId">Name of alias.</param>/// <param name="alias">Alias details to be modified.</param>
        /// <returns>Task of ApiResponse<Alias></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<Alias>> ModifyActivityAliasAsync (string id, string aliasId, Alias alias)
        {
            var localVarPath = "/v3/activities/{id}/aliases/{aliasId}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter
                localVarPath = Marshalling.SetPathVariable(localVarPath, "aliasId", aliasId); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                


                request.Content = Marshalling.Serialize(alias, "application/json"); // http body (model) parameter

                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<Alias>(localVarResponse, (Alias)Marshalling.Deserialize(localVarResponse.Content, typeof(Alias)));

            } // using
        }
    }
}
