/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using System.Net.Http;
using System.Web;

namespace Autodesk.Forge.DesignAutomation.Client
{
    /// <summary>
    /// Helpers for marshalling parameters
    /// </summary>
    public partial class Marshalling
    {
        private JsonSerializerSettings serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601)
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj)
        {
            if (obj is DateTime)
            {
                // https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#Roundtrip
                return ((DateTime)obj).ToString ("o");
            }
            else
            {
                return Convert.ToString (obj);
            }
        }

        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="content">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        public static object Deserialize(HttpContent content, Type type)
        {
            return JsonConvert.DeserializeObject(content.ReadAsStringAsync().Result, type);
        }

        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>HttpContent</returns>
        public static HttpContent Serialize(object obj, string contentType)
        {
            return new StringContent(JsonConvert.SerializeObject(obj));
        }

        public static string SetPathVariable(string path, string name, object value)
        {
            return path.Replace($"", value.ToString());
        }

        public static string AddQuery(string localVarPath, string v, string page)
        {
            throw new NotImplementedException();
        }
    }
}
