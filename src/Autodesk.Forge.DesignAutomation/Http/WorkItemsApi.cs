/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Client;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation.Http
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkItemsApiHttp
    {
        /// <summary>
        /// Creates a new WorkItem and queues it for processing. Creates a new WorkItem and queues it for processing.  The new WorkItem is always placed on the  queue; no further action is necessary.                Limits (Engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="workitem"></param>
        /// <returns>Task of ApiResponse<WorkItemStatus></returns>
        
        System.Threading.Tasks.Task<ApiResponse<WorkItemStatus>> CreateWorkItemsAsync (WorkItem workitem);
        /// <summary>
        /// Cancels a specific WorkItem. Cancels a specific WorkItem.  If the WorkItem is on the queue, it is removed from the queue and not processed.  If the WorkItem is already being processed, then it may or may not be interrupted and cancelled.  If the WorkItem has already finished processing, then it has no effect on the processing or results.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        System.Threading.Tasks.Task<HttpResponseMessage> DeleteWorkitemsAsync (string id);
        /// <summary>
        /// Gets the status of a specific WorkItem. Gets the status of a specific WorkItem.  Typically used to &#39;poll&#39; for              the completion of a WorkItem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  WorkItem status is retained              for a limited period of time after the WorkItem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse<WorkItemStatus></returns>
        
        System.Threading.Tasks.Task<ApiResponse<WorkItemStatus>> GetWorkitemsStatusAsync (string id);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkItemsApiHttp : IWorkItemsApiHttp
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemsApiHttp"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public WorkItemsApiHttp(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.Service = service ?? ForgeService.CreateDefault();

            // set BaseAddress from configuration or default
            this.Service.Client.BaseAddress = configuration?.Value.BaseAddress ?? new Configuration().BaseAddress;
        }

         /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the ForgeService</value>
        public ForgeService Service {get; set;}

        /// <summary>
        /// Creates a new WorkItem and queues it for processing. Creates a new WorkItem and queues it for processing.  The new WorkItem is always placed on the  queue; no further action is necessary.                Limits (Engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="workitem"></param>
        /// <returns>Task of ApiResponse<WorkItemStatus></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<WorkItemStatus>> CreateWorkItemsAsync (WorkItem workitem)
        {
            var localVarPath = "/v3/workitems";

            using (var request = new HttpRequestMessage())
            {

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                


                request.Content = Marshalling.Serialize(workitem, "application/json"); // http body (model) parameter

                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<WorkItemStatus>(localVarResponse, (WorkItemStatus)Marshalling.Deserialize(localVarResponse.Content, typeof(WorkItemStatus)));

            } // using
        }
        /// <summary>
        /// Cancels a specific WorkItem. Cancels a specific WorkItem.  If the WorkItem is on the queue, it is removed from the queue and not processed.  If the WorkItem is already being processed, then it may or may not be interrupted and cancelled.  If the WorkItem has already finished processing, then it has no effect on the processing or results.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        
        /// <returns>Task of HttpResponseMessage</returns>
        public async System.Threading.Tasks.Task<HttpResponseMessage> DeleteWorkitemsAsync (string id)
        {
            var localVarPath = "/v3/workitems/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return localVarResponse;

            } // using
        }
        /// <summary>
        /// Gets the status of a specific WorkItem. Gets the status of a specific WorkItem.  Typically used to &#39;poll&#39; for              the completion of a WorkItem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  WorkItem status is retained              for a limited period of time after the WorkItem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse<WorkItemStatus></returns>
        
        public async System.Threading.Tasks.Task<ApiResponse<WorkItemStatus>> GetWorkitemsStatusAsync (string id)
        {
            var localVarPath = "/v3/workitems/{id}";

            using (var request = new HttpRequestMessage())
            {
                localVarPath = Marshalling.SetPathVariable(localVarPath, "id", id); // path parameter

                // Request URI is now ready
                request.RequestUri = new Uri(localVarPath);

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                



                // tell the underlying pipeline what scope we'd like to use
                request.Properties.Add(ForgeConfiguration.ScopeKey, "code:all");

                // make the HTTP request
                var localVarResponse = await this.Service.Client.SendAsync(request);

                localVarResponse.EnsureSuccessStatusCode();

                return new ApiResponse<WorkItemStatus>(localVarResponse, (WorkItemStatus)Marshalling.Deserialize(localVarResponse.Content, typeof(WorkItemStatus)));

            } // using
        }
    }
}
