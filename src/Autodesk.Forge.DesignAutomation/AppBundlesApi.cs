/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Http;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBundlesApi
    {
        /// <summary>
        /// Creates a new AppBundle.
        /// </summary>
        /// <remarks>
        /// Creates a new AppBundle.              | Limits: (varies by Engine)              | 1. Number of AppBundle that can be created.              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size.              |              | After this request, you need to upload the AppBundle zip.              | Use data received in the response to create multipart/form-data request. An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              | The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="item"></param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task<AppBundle> CreateAppBundleAsync (AppBundle item);
        /// <summary>
        /// Creates a new alias for this AppBundle.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this AppBundle. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="alias"></param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> CreateAppBundleAliasAsync (string id, Alias alias);
        /// <summary>
        /// Creates a new version of the AppBundle.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the AppBundle.              | Limit:              | 1. Number of versions (LimitVersions).              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in AppBundle.UploadParameters.              |              | After this request, you need to upload the AppBundle zip.              | Use data received in the response to create multipart/form-data request. An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"></param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task<AppBundle> CreateAppBundleVersionAsync (string id, AppBundle item);
        /// <summary>
        /// Deletes the specified AppBundle.
        /// </summary>
        /// <remarks>
        /// Deletes the specified AppBundle, including all versions and aliases.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAppBundleAsync (string id);
        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAppBundleAliasAsync (string id, string aliasId);
        /// <summary>
        /// Deletes the specified version of the AppBundle.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the AppBundle.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="version">Version to delete (as integer).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAppBundleVersionAsync (string id, int version);
        /// <summary>
        /// Gets the details of the specified AppBundle.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified AppBundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the AppBundle (owner.name+label).</param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task<AppBundle> GetAppBundleAsync (string id);
        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> GetAppBundleAliasAsync (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified AppBundle.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified AppBundle.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task<PageAlias> GetAppBundleAliasesAsync (string id, string page = null);
        /// <summary>
        /// Gets the details of the specified version of the AppBundle.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the AppBundle.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task<AppBundle> GetAppBundleVersionAsync (string id, int version);
        /// <summary>
        /// Lists all versions of the specified AppBundle.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified AppBundle.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        System.Threading.Tasks.Task<PageInt32> GetAppBundleVersionsAsync (string id, string page = null);
        /// <summary>
        /// Lists all available AppBundles.
        /// </summary>
        /// <remarks>
        /// Lists all available AppBundles, including AppBundles shared with this Forge app.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        System.Threading.Tasks.Task<QueryResultPageString> GetAppBundlesAsync (string page = null);
        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> ModifyAppBundleAliasAsync (string id, string aliasId, Alias alias);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBundlesApi : IAppBundlesApi
    {
        public readonly AppBundlesApiHttp LowLevelApi;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBundlesApi"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public AppBundlesApi(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.LowLevelApi = new AppBundlesApiHttp(service);
        }

        /// <summary>
        /// Creates a new AppBundle. Creates a new AppBundle.              | Limits: (varies by Engine)              | 1. Number of AppBundle that can be created.              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size.              |              | After this request, you need to upload the AppBundle zip.              | Use data received in the response to create multipart/form-data request. An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              | The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="item"></param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task<AppBundle> CreateAppBundleAsync (AppBundle item)
        {
             var localVarResponse = await this.LowLevelApi.CreateAppBundleAsync(item);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Creates a new alias for this AppBundle. Creates a new alias for this AppBundle. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="alias"></param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> CreateAppBundleAliasAsync (string id, Alias alias)
        {
             var localVarResponse = await this.LowLevelApi.CreateAppBundleAliasAsync(id, alias);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Creates a new version of the AppBundle. Creates a new version of the AppBundle.              | Limit:              | 1. Number of versions (LimitVersions).              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in AppBundle.UploadParameters.              |              | After this request, you need to upload the AppBundle zip.              | Use data received in the response to create multipart/form-data request. An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"></param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task<AppBundle> CreateAppBundleVersionAsync (string id, AppBundle item)
        {
             var localVarResponse = await this.LowLevelApi.CreateAppBundleVersionAsync(id, item);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Deletes the specified AppBundle. Deletes the specified AppBundle, including all versions and aliases.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAppBundleAsync (string id)
        {
             await this.LowLevelApi.DeleteAppBundleAsync(id);

        }
        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAppBundleAliasAsync (string id, string aliasId)
        {
             await this.LowLevelApi.DeleteAppBundleAliasAsync(id, aliasId);

        }
        /// <summary>
        /// Deletes the specified version of the AppBundle. Deletes the specified version of the AppBundle.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="version">Version to delete (as integer).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAppBundleVersionAsync (string id, int version)
        {
             await this.LowLevelApi.DeleteAppBundleVersionAsync(id, version);

        }
        /// <summary>
        /// Gets the details of the specified AppBundle. Gets the details of the specified AppBundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the AppBundle (owner.name+label).</param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task<AppBundle> GetAppBundleAsync (string id)
        {
             var localVarResponse = await this.LowLevelApi.GetAppBundleAsync(id);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> GetAppBundleAliasAsync (string id, string aliasId)
        {
             var localVarResponse = await this.LowLevelApi.GetAppBundleAliasAsync(id, aliasId);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all aliases for the specified AppBundle. Lists all aliases for the specified AppBundle.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task<PageAlias> GetAppBundleAliasesAsync (string id, string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetAppBundleAliasesAsync(id, page);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Gets the details of the specified version of the AppBundle. Gets the details of the specified version of the AppBundle.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task<AppBundle> GetAppBundleVersionAsync (string id, int version)
        {
             var localVarResponse = await this.LowLevelApi.GetAppBundleVersionAsync(id, version);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all versions of the specified AppBundle. Lists all versions of the specified AppBundle.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        public async System.Threading.Tasks.Task<PageInt32> GetAppBundleVersionsAsync (string id, string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetAppBundleVersionsAsync(id, page);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all available AppBundles. Lists all available AppBundles, including AppBundles shared with this Forge app.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        public async System.Threading.Tasks.Task<QueryResultPageString> GetAppBundlesAsync (string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetAppBundlesAsync(page);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of AppBundle (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> ModifyAppBundleAliasAsync (string id, string aliasId, Alias alias)
        {
             var localVarResponse = await this.LowLevelApi.ModifyAppBundleAliasAsync(id, aliasId, alias);
             return localVarResponse.Content;

        }
    }
}
