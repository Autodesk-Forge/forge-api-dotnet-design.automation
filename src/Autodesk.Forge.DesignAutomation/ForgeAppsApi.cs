/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Http;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForgeAppsApi
    {
        /// <summary>
        /// Creates/updates the nickname for the current Forge app.
        /// </summary>
        /// <remarks>
        /// Creates/updates the nickname for the current Forge app.  The nickname is  used as a clearer alternative name when identifying AppBundles and Activities, as  compared to using the Forge app ID.  Once you have defined a nickname,  it MUST be used instead of the Forge app ID.                The new nickname cannot be in use by any other Forge app.                The Forge app cannot have any data when this endpoint is invoked.  Use the &#39;DELETE /forgeapps/me&#39;  endpoint (cautiously!!!) to remove all data from this Forge app.  &#39;DELETE /forgeapps/me&#39; is  also the only way to remove the nickname.                Note the nickname is supplied in the body, not as a query-parameter.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <param name="nicknameRecord">new nickname (public key is for internal use only).</param>
        /// <returns>Task of StatusCodeResult</returns>
        System.Threading.Tasks.Task<StatusCodeResult> CreateNicknameAsync (string id, NicknameRecord nicknameRecord);
        /// <summary>
        /// Delete all data associated with this Forge app.
        /// </summary>
        /// <remarks>
        /// Delete all data associated with the given Forge app.                ALL Design Automation appbundles and activities are DELETED.                This action is required prior to using the &#39;PATCH /forgeapps/me&#39; endpoint when changing the nickname for the current Forge app,.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string id);
        /// <summary>
        /// Returns the user&#39;s (app) nickname.
        /// </summary>
        /// <remarks>
        /// Return the given Forge app&#39;s nickname.                If the app has no nickname, this route will return its id.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetNicknameAsync (string id);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForgeAppsApi : IForgeAppsApi
    {
        public readonly ForgeAppsApiHttp LowLevelApi;

        /// <summary>
        /// Initializes a new instance of the <see cref="ForgeAppsApi"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public ForgeAppsApi(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.LowLevelApi = new ForgeAppsApiHttp(service);
        }

        /// <summary>
        /// Creates/updates the nickname for the current Forge app. Creates/updates the nickname for the current Forge app.  The nickname is  used as a clearer alternative name when identifying AppBundles and Activities, as  compared to using the Forge app ID.  Once you have defined a nickname,  it MUST be used instead of the Forge app ID.                The new nickname cannot be in use by any other Forge app.                The Forge app cannot have any data when this endpoint is invoked.  Use the &#39;DELETE /forgeapps/me&#39;  endpoint (cautiously!!!) to remove all data from this Forge app.  &#39;DELETE /forgeapps/me&#39; is  also the only way to remove the nickname.                Note the nickname is supplied in the body, not as a query-parameter.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <param name="nicknameRecord">new nickname (public key is for internal use only).</param>
        /// <returns>Task of StatusCodeResult</returns>
        public async System.Threading.Tasks.Task<StatusCodeResult> CreateNicknameAsync (string id, NicknameRecord nicknameRecord)
        {
             var localVarResponse = await this.LowLevelApi.CreateNicknameAsync(id, nicknameRecord);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Delete all data associated with this Forge app. Delete all data associated with the given Forge app.                ALL Design Automation appbundles and activities are DELETED.                This action is required prior to using the &#39;PATCH /forgeapps/me&#39; endpoint when changing the nickname for the current Forge app,.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string id)
        {
             await this.LowLevelApi.DeleteUserAsync(id);

        }
        /// <summary>
        /// Returns the user&#39;s (app) nickname. Return the given Forge app&#39;s nickname.                If the app has no nickname, this route will return its id.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Must be \&quot;me\&quot; for the call to succeed.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetNicknameAsync (string id)
        {
             var localVarResponse = await this.LowLevelApi.GetNicknameAsync(id);
             return localVarResponse.Content;

        }
    }
}
