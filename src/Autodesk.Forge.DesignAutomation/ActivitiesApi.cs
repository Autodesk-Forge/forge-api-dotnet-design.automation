/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Http;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivitiesApi
    {
        /// <summary>
        /// Creates a new Activity.
        /// </summary>
        /// <remarks>
        /// Creates a new Activity.              Limits (varies by Engine):              1. Number of Activities that can be created.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="item"></param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task<Activity> CreateActivityAsync (Activity item);
        /// <summary>
        /// Creates a new alias for this Activity.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this Activity.              Limit:              1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> CreateActivityAliasAsync (string id, Alias alias);
        /// <summary>
        /// Creates a new version of the Activity.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the Activity.              Limit:              1. Number of versions (LimitVersions).
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="item"></param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task<Activity> CreateActivityVersionAsync (string id, Activity item);
        /// <summary>
        /// Deletes the specified Activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified Activity, including all versions and aliases.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteActivityAsync (string id);
        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteActivityAliasAsync (string id, string aliasId);
        /// <summary>
        /// Deletes the specified version of the Activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the Activity.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="version">Version to delete (integer).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteActivityVersionAsync (string id, int version);
        /// <summary>
        /// Gets the details of the specified version of the Activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the Activity.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task<Activity> GeActivityVersionAsync (string id, int version);
        /// <summary>
        /// Lists all available Activities.
        /// </summary>
        /// <remarks>
        /// Lists all available Activities, including Activities shared with this Forge app.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        System.Threading.Tasks.Task<QueryResultPageString> GetActivitiesAsync (string page = null);
        /// <summary>
        /// Gets the details of the specified Activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified Activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the Activity (owner.name+label).</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task<Activity> GetActivityAsync (string id);
        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> GetActivityAliasAsync (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified Activity.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified Activity.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task<PageAlias> GetActivityAliasesAsync (string id, string page = null);
        /// <summary>
        /// Lists all versions of the specified Activity.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified Activity.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        System.Threading.Tasks.Task<PageInt32> GetActivityVersionsAsync (string id, string page = null);
        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> ModifyActivityAliasAsync (string id, string aliasId, Alias alias);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActivitiesApi : IActivitiesApi
    {
        public readonly ActivitiesApiHttp LowLevelApi;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public ActivitiesApi(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.LowLevelApi = new ActivitiesApiHttp(service);
        }

        /// <summary>
        /// Creates a new Activity. Creates a new Activity.              Limits (varies by Engine):              1. Number of Activities that can be created.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="item"></param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task<Activity> CreateActivityAsync (Activity item)
        {
             var localVarResponse = await this.LowLevelApi.CreateActivityAsync(item);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Creates a new alias for this Activity. Creates a new alias for this Activity.              Limit:              1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> CreateActivityAliasAsync (string id, Alias alias)
        {
             var localVarResponse = await this.LowLevelApi.CreateActivityAliasAsync(id, alias);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Creates a new version of the Activity. Creates a new version of the Activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="item"></param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task<Activity> CreateActivityVersionAsync (string id, Activity item)
        {
             var localVarResponse = await this.LowLevelApi.CreateActivityVersionAsync(id, item);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Deletes the specified Activity. Deletes the specified Activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteActivityAsync (string id)
        {
             await this.LowLevelApi.DeleteActivityAsync(id);

        }
        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteActivityAliasAsync (string id, string aliasId)
        {
             await this.LowLevelApi.DeleteActivityAliasAsync(id, aliasId);

        }
        /// <summary>
        /// Deletes the specified version of the Activity. Deletes the specified version of the Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="version">Version to delete (integer).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteActivityVersionAsync (string id, int version)
        {
             await this.LowLevelApi.DeleteActivityVersionAsync(id, version);

        }
        /// <summary>
        /// Gets the details of the specified version of the Activity. Gets the details of the specified version of the Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task<Activity> GeActivityVersionAsync (string id, int version)
        {
             var localVarResponse = await this.LowLevelApi.GeActivityVersionAsync(id, version);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all available Activities. Lists all available Activities, including Activities shared with this Forge app.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        public async System.Threading.Tasks.Task<QueryResultPageString> GetActivitiesAsync (string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetActivitiesAsync(page);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Gets the details of the specified Activity. Gets the details of the specified Activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the Activity (owner.name+label).</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task<Activity> GetActivityAsync (string id)
        {
             var localVarResponse = await this.LowLevelApi.GetActivityAsync(id);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> GetActivityAliasAsync (string id, string aliasId)
        {
             var localVarResponse = await this.LowLevelApi.GetActivityAliasAsync(id, aliasId);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all aliases for the specified Activity. Lists all aliases for the specified Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task<PageAlias> GetActivityAliasesAsync (string id, string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetActivityAliasesAsync(id, page);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all versions of the specified Activity. Lists all versions of the specified Activity.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        public async System.Threading.Tasks.Task<PageInt32> GetActivityVersionsAsync (string id, string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetActivityVersionsAsync(id, page);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of Activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> ModifyActivityAliasAsync (string id, string aliasId, Alias alias)
        {
             var localVarResponse = await this.LowLevelApi.ModifyActivityAliasAsync(id, aliasId, alias);
             return localVarResponse.Content;

        }
    }
}
