/* 
 * Forge Design Automation
 *
 * Generated by [Forge Swagger Codegen](https://git.autodesk.com/design-automation/forge-rsdk-codegen)
 */

using Autodesk.Forge.Core;
using Microsoft.Extensions.Options;
using System.Net.Http;
using Autodesk.Forge.DesignAutomation.Http;
using Autodesk.Forge.DesignAutomation.Model;

namespace Autodesk.Forge.DesignAutomation
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnginesApi
    {
        /// <summary>
        /// Gets the details of the specified Engine.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified Engine. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the Engine (owner.name+label).</param>
        /// <returns>Task of Engine</returns>
        System.Threading.Tasks.Task<Engine> GetEngineAsync (string id);
        /// <summary>
        /// Lists all available Engines.
        /// </summary>
        /// <remarks>
        /// Lists all available Engines.
        /// </remarks>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        System.Threading.Tasks.Task<QueryResultPageString> GetEnginesAsync (string page = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnginesApi : IEnginesApi
    {
        public readonly EnginesApiHttp LowLevelApi;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnginesApi"/> class
        /// using ForgeService object
        /// </summary>
        /// <param name="service">An instance of ForgeService</param>
        /// <returns></returns>
        public EnginesApi(ForgeService service = null, IOptions<Configuration> configuration = null)
        {
            this.LowLevelApi = new EnginesApiHttp(service, configuration);
        }

        /// <summary>
        /// Gets the details of the specified Engine. Gets the details of the specified Engine. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the Engine (owner.name+label).</param>
        /// <returns>Task of Engine</returns>
        public async System.Threading.Tasks.Task<Engine> GetEngineAsync (string id)
        {
             var localVarResponse = await this.LowLevelApi.GetEngineAsync(id);
             return localVarResponse.Content;

        }
        /// <summary>
        /// Lists all available Engines. Lists all available Engines.
        /// </summary>
        /// <exception cref="HttpRequestException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        public async System.Threading.Tasks.Task<QueryResultPageString> GetEnginesAsync (string page = null)
        {
             var localVarResponse = await this.LowLevelApi.GetEnginesAsync(page);
             return localVarResponse.Content;

        }
    }
}
